#!/usr/bin/env ruby

class DevHelper
  def self.call(*args)
    new.call(*args)
  end

  # Core logic
  def call(*args, **kwargs)
    if args.length.positive? && respond_to?(args[0])
      public_send(args[0], *args.drop(1), **kwargs)
    else
      compose(*args, **kwargs)
    end
  end

  def compose(*args, **kwargs)
    command = compose_command(*args, **kwargs)
    puts "Running: #{command}"
    exec(command)
  end

  def build(*args, **kwargs)
    compose(%w[build], *args, **kwargs)
  end

  def up(*args, **kwargs)
    compose(*%w[up --remove-orphans], *args, **kwargs)
  end

  def down(*args, **kwargs)
    compose(*%w[down --remove-orphans], *args, **kwargs)
  end

  def logs(*args, **kwargs)
    compose(*%w[logs -f], *args, **kwargs)
  end

  def run(*args, **kwargs)
    compose(*%w[run --rm], *args, **kwargs)
  end

  # Custom helpers
  def bash(*args, **kwargs)
    run(
      *%w[app bash],
      *args,
      **kwargs
    )
  end

  def debug
    app_container_id = container_id('app')
    puts 'Awaiting binding.pry to trigger...'
    puts "'ctrl-c' to exit"
    command = "docker attach --detach-keys ctrl-c #{app_container_id}"
    puts "Running: #{command}"
    exec(command)
    exit 0
  end

  def mocha(*args, **kwargs)
    run(*%w[test npm run test], *args, **kwargs)
  end

  alias test mocha

  def npm(*args, **kwargs)
    run(*%w[app npm], *args, **kwargs)
  end

  def sqlcmd(*args, **kwargs) # rubocop:disable Metrics/MethodLength
    db_host = ENV.fetch('DB_HOST', 'localhost')
    db_user = ENV.fetch('DB_USER', 'sa')
    db_pass = ENV.fetch('DB_PASS', '1m5ecure!')
    db_name = ENV.fetch('DB_NAME', 'LegalFiles')
    compose(
      *%w[exec db /opt/mssql-tools/bin/sqlcmd],
      *%W[-U #{db_user}],
      *%W[-P #{db_pass}],
      *%W[-H #{db_host}],
      *%W[-d #{db_name}],
      '-I', # enable quoted identifiers, e.g. "table"."column"
      *args,
      **kwargs
    )
  end

  def bash_completions
    completions = public_methods(false).reject do |word|
      %i[call].include?(word)
    end
    puts completions
  end

  private

  def container_id(container_name, *args, **kwargs)
    command = compose_command(*%w[ps -q], container_name, *args, **kwargs)
    puts "Running: #{command}"
    id_of_container = `#{command}`.chomp
    puts "Container id is: #{id_of_container}"
    id_of_container
  end

  def compose_command(*args, **kwargs)
    environment = kwargs.fetch(:environment, 'development')
    "docker compose -f docker-compose.#{environment}.yaml #{args.join(' ')}"
  end
end

# Only execute main function when file is executed
DevHelper.call(*ARGV) if $PROGRAM_NAME == __FILE__

## Dev completions
# https://iridakos.com/programming/2018/03/01/bash-programmable-completion-tutorial
# _dev_completions () {
#   local dev_command_path="$(which dev)"
#   local dev_function_names
#   dev_function_names="$(ruby "$dev_command_path" bash_completions)"
#   # COMP_WORDS: an array of all the words typed after the name of the program the compspec belongs to
#   # COMP_CWORD: an index of the COMP_WORDS array pointing to the word the current cursor is at - in other words, the index of the word the cursor was when the tab key was pressed
#   # COMP_LINE: the current command line
#   COMPREPLY=($(compgen -W "$dev_function_names" "${COMP_WORDS[$COMP_CWORD]}"))
# }

# complete -F _dev_completions dev
# complete -W "allow" direnv
